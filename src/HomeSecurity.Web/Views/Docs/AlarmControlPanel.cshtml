@{
    ViewBag.Title = "AlarmControlPanel";
}

<h2>Alarm Control Panel</h2>
<p>The alarm control panel device has several functions in the security system. 
    </p>
<ul>
    <li>Set the state of the alarm (away/sleep)</li>
    <li>Show the state of the alarm (away/sleep/off)</li>
    <li>Enter in a code to disarm the alarm</li>
    <li>Let the user know if the code entered is wrong</li>
    <li>Monitor a window circuit to determine if any of the windows are opened</li>
    <li>Monitor a motion detector circuit to determine if any one of the detectors are triggered by motion</li>
</ul>
<p>There can be more than one alarm control panel in a home so part of the message topic includes the name of the panel (i.e firstfloor, masterbedroom, bedroom1, bedroom2).</p>
<h2>Messages</h2>
<h3>The following MQTT messages will be published from this device (note only the firstfloor topics are shown here).</h3>
<table>
    <thead>
        <tr><th>Address</th><th>Data</th><th>Description</th></tr>
    </thead>
    <tr>
        <td>/house1/alarmpanel/firstfloor/ping</td>
        <td>any message</td>
        <td>This is a simple message that can be used to test that your device is sending messages to the 
            broker and if the broker receives it the message will be published back to the device it came from</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/alarmstate</td>
        <td>away/sleep</td>
        <td>This alarm panel has changed the state of the security system</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/code</td>
        <td>01</td>
        <td>A code of 01 was entered on the first floor control panel pad.</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/window</td>
        <td>opened/closed</td>
        <td>The window circuit is opened or closed.</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/motion</td>
        <td>opened/closed</td>
        <td>The motion circuit is opened or closed.</td>
    </tr>
</table>
<h3>The device should subscribe to the following MQTT messages.</h3>
<table>
    <thead>
        <tr><th>Address</th><th>Data</th><th>Description</th></tr>
    </thead>
    <tr>
        <td>/house1/alarmpanel/firstfloor/pingresp</td>
        <td>the message that was received by the broker</td>
        <td>This is the response message from the broker that this device sent via the ping topic.</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/setalarmstate</td>
        <td>away/sleep/off</td>
        <td>The device should change the LEDs showing the newly set state of the security system, away = LED 1 ON and LED 2 OFF, sleep = LED 1 OFF and LED 2 ON, off = LED 1 and 2 OFF</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/codevalid</td>
        <td>true/false</td>
        <td>The code entered on the key panel was valid or not (true or false) If the value is false then flash the LED on/off twice.</td>
    </tr>
    <tr>
        <td>/house1/alarmpanel/firstfloor/alarmstatevalid</td>
        <td>true/false</td>
        <td>The request to change the alarm state was valid or not(true or false) If the value is false then flash the LED on/off twice.</td>
    </tr>
</table>
<h2>Hardware</h2>
<p>You will need the following hardware to simulate the input and output the alarm control panel.</p>
<table>
    <thead>
        <tr>
            <th>Qty</th>
            <th>Name</th>
            <th>Description</th>
        </tr>
    </thead>
    <tr>
        <td>1</td>
        <td>Netduino Plus</td>
        <td>The micro board used to execute the logic for the device</td>
    </tr>
    <tr>
        <td>3</td>
        <td>Pushbutton Switch</td>
        <td>Simulates keypad keys for the following: 0, 1 and enter </td>
    </tr>
    <tr>
        <td>2</td>
        <td>LED</td>
        <td>LED 1 and 2 indicates the state of the security system. <br />away = LED 1 ON and LED 2 OFF <br /> sleep = LED 1 OFF and LED 2 ON<br /> off = LED 1 and 2 OFF</td>
    </tr>
    <tr>
        <td>1</td>
        <td>LED</td>
        <td>Tells the user that the code entered on the simulated keypad was wrong. Flashes on/off 2 times.</td>
    </tr>
    <tr>
        <td>1</td>
        <td>Pushbutton Switch</td>
        <td>Simulates if the window circuit is open or closed. Pushed = window opened, Not Pushed = window closed</td>
    </tr>
    <tr>
        <td>1</td>
        <td>Pushbutton Switch</td>
        <td>Set the alarm into sleep mode</td>
    </tr>
    <tr>
        <td>1</td>
        <td>Pushbutton Switch</td>
        <td>Set the alarm into away mode</td>
    </tr>
</table>
<h2>Completing the Device</h2>
<p>
    The assumption here is that you have gone through the steps outlined in the <a href="GettingReadyForTheMeeting">Getting Ready for the Meeting</a>.  
    If that is not the case then you need to stop here and load the Software and SDK's needed to do .Net micro framework development with the Netduino.
</p>
<p>When you download the source there will be two solutions for each device.  One solution has all the code completed and is there 
    for your reference (look in the End.* folders). Use this solution for when you get stuck in the lab and you need a hint on how to complete a section of the lab. 
    The other solution (look in the Begin.* folders) will be the one that you start out with that 
    has some basic code already done for you.
</p>
<h3>Initial Setup of the Device</h3>
<p>
    <ol>
        <li>Get the hardware you need for the device (Netduino, LED's and Switches)</li>
        <li>You don't need to wire up the LED's and Switches to the Netduino yet, just have them handy</li>
        <li>Get the sign in sheet that was passed around at the start of the meeting
            <ol>
                <li>Fill out the <strong>Unique Client ID</strong> (use your initials as long as no one else has)</li>
                <li>Make a note of the <strong>House Code, Device Code and Location Code</strong> from the sign in sheet</li>
            </ol>
        </li>
        <li>Download the Netduino Home Security source code zip from the <a href="https://github.com/mlinnen/NetduinoHomeSecurity/downloads">github repository</a></li>
        <li>Unzip it into a directory of your choice</li>
        <li>Using Visual Studio open up the <strong>src\Begin.HomeSecurity.Device.AlarmPanel\HomeSecurity.Device.AlarmPanel.sln</strong></li>
        <li>Compile the solution (you should get 0 errors)</li>
        <li>Open up <strong>Program.cs</strong></li>
        <li>Set the <strong>_mqttDeviceId</strong> variable to the Unique Client Id that you put on the signup sheet</li>
        <li>Change the _locationCode = 'firstfloor' to the <strong>Location Code</strong> that was on the signup sheet</li>
        <li>Hookup the Netduino to your laptop using the Micro USB Cable and wait for the device drivers on the Netduino to load</li>
        <li>In Visual Studio open up the properties of the <strong>HomeSecurity.Device.AlarmPanel</strong> Project and select the <strong>.Net Micro Framework</strong> tab
            <ol>
                <li>Verify the <strong>Deployment Transport:</strong> is set to <strong>USB</strong></li>
                <li>Verify the <strong>Deployment Device:</strong> is set to <strong>NetduinoPlus2_NetduinoPlus</strong></li>
            </ol>
        </li>
        <li>Compile and Run the Application
            <ul>
                <li>The application should run but it wont be able to connect to the MQTT broker because the Ethernet cable is not connected yet</li>
                <li>If Visual Studio appears to hang and it is attempting to deploy the assemblies to the board then disconnect the board from USB and try again</li>
            </ul>
        </li>
        <li>Connect the Ethernet cable to the Netduino and the Hub</li>
    </ol>
</p>
<h3>Coding the ping and ping response</h3>
<p>The next steps will take you through publishing your first MQTT message and then subscribing to your first topic.  The code
    that actually implements the MQTT protocol is already done for you and is included in the project as a library (Device.MQTT_4.X) for you to call.
<h4>Ping</h4>
    <ol>
        <li>Open up the <strong>AlarmPanelController.cs</strong> class</li>
        <li>Open up the <strong>Start()</strong> method and look for the <strong>TODO Send out ...</strong> comment in the code</li>
        <li>Add the following line of code replacing the TODO comment:</li>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="rem">// Send out a ping topic with Hello World as the message and it should come back to this device as a pingresp</span>
_mqttService.Publish(<span class="kwrd">new</span> MqttParcel(Topic + <span class="str">"ping"</span>,<span class="str">"Hello world"</span>,QoS.BestEfforts,<span class="kwrd">false</span>));</pre>
        <li>If you want you can replace the Hello world text with anything you want so that you can tell the message was yours when you monitor the message bus.</li>
        <li>Make sure the instructor is running the MQTT Audit program on a laptop that is visible to everyone.  If he isn't then tell him to launch it!</li>
        <li>Compile and Run your application and watch for your message get picked up by the MQTT Audit program</li>
    </ol>
<h4>Ping Response</h4>
    <ol>
        <li>Open up the <strong>Subscribe()</strong> method on the AlarmPanelController and look for the <strong>TODO setup your subscriptions here</strong> comment in the code</li>
        <li>Add the following line of code replacing the TODO comment:
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
Subscription subscription = <span class="kwrd">null</span>; ;
subscription = <span class="kwrd">new</span> Subscription(Topic + <span class="str">"pingresp"</span>, QoS.BestEfforts);
messageId = _mqttService.Subscribe(subscription);
</pre>
                <ul>
                    <li>This tells the MQTT broker you want to subscribe to a specific topic (like /house1/alarm/firstfloor/pingresp)</li>
                    <li>When the topic arrives the PublisheArrived method will be called on the AlarmPanelController</li>
                </ul>
            </li>
        <li>Compile and Run your application and in Visual Studio you should see your message being written out to the Output window 
            (See the _logger.Info call in the PublishedArrived method)
            <ul>
                <li>Basically your Netduino Application sent a Ping request to the MQTT Broker and the Master Control Panel in Azure was subscribed to
                    your ping topic and it sent back a pingresp to your Netduino
                </li>
            </ul>
        </li>
        <li>Next we will add logic to light the Onboard LED for 3 seconds when the pingresp arrives</li>
        <li>Create a private variable in the AlarmPanelController to represent the Output Port for the onboard LED
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">private</span> OutputPort _pingResponseOutput = <span class="kwrd">new</span> OutputPort(Pins.ONBOARD_LED, <span class="kwrd">false</span>);
</pre>
        </li>
        <li>Create a private variable in the AlarmPanelController to represent a timer that will be used to turn off the LED after 3 seconds
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">private</span> <span class="kwrd">static</span> Timer _pingResponseTimer = <span class="kwrd">null</span>;
</pre>

        </li>
        <li>In the constructor of the AlarmPanelController class initialize the timer to never fire and have a callback of OnPingResponseTimer
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
_pingResponseTimer = <span class="kwrd">new</span> Timer(<span class="kwrd">new</span> TimerCallback(OnPingResponseTimer), <span class="kwrd">this</span>._pingResponseOutput, Timeout.Infinite, Timeout.Infinite);
</pre>

        </li>
        <li>Create the OnPingResponseTimer callback method
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">private</span> <span class="kwrd">static</span> <span class="kwrd">void</span> OnPingResponseTimer(<span class="kwrd">object</span> state)
{
   _pingResponseTimer.Change(Timeout.Infinite, Timeout.Infinite);
   OutputPort output = (OutputPort)state;
   <span class="kwrd">bool</span> isOn = output.Read();
   output.Write(!isOn);
}
</pre>
        </li>
        <li>Now all you need to do is when the pingresp topic arrives is to turn on the LED and enable the timer to fire in 3 seconds
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">private</span> <span class="kwrd">bool</span> PublishArrived(<span class="kwrd">object</span> sender, PublishArrivedArgs e)
{
    _logger.Info(<span class="str">"Msg Recvd: "</span> + e.Topic + <span class="str">" "</span> + e.Payload.ToString());

    <span class="kwrd">if</span> (e.Topic.Equals(Topic + <span class="str">"pingresp"</span>))
    {
        _pingResponseOutput.Write(<span class="kwrd">true</span>);
        _pingResponseTimer.Change(3000, 3000);
        <span class="kwrd">return</span> <span class="kwrd">true</span>;
    }
</pre>
            
        </li>
        <li>
            Compile and Run the application and the blue onboard LED should come on for 3 seconds
        </li>
    </ol>
</p>
<p>
    So far you have learned how to do the following:
    <ul>
        <li>Publish a message to an MQTT broker</li>
        <li>Subscribe to a topic on an MQTT broker</li>
        <li>Use a timer</li>
        <li>Turn on and off an LED</li>
    </ul>
</p>
<h3>Coding the LED indicators for Away and Sleep mode</h3>
<p>
    Since you know how to subscribe to messages and turn an LED on and off the next steps won't be so detailed.
    <ol>
        <li>Create private variables for each LED OutputPort as outlined on the Schematic (D0 & D1)</li>
        <li>Add a subscription for the setalarmstate topic in the Subscribe method</li>
        <li>Add code in the PublishArrived method to test for the specific topic and turn on/off the LED based on the message body being away or sleep</li>
        <li>Wire up the LED's to the Netduino</li>
        <li>Compile and Run the application</li>
        <li>Go to the @Html.ActionLink("Home Security Dashboard", "Index", "HomeSecurity") and make sure all doors, windows and motion detectors are closed, then click on Away or Sleep indicator and verify your Away and Sleep indicators turn on correctly</li>
        <li>To disarm the alarm enter in a code of 01 and click on the enter button on the dashboard UI.  Your Away and Sleep LEDs should turn off.</li>
    </ol>
</p>
<h3>Coding the LED indicator for invalid code</h3>
<p>
    The logic behind this LED indicator is a little more complex, but you already know how to use timers, subscribe to topics and toggle output pins, 
    so it shouldn't be too tough.  This LED turns on/off for 1 second 2 times if the codevalid or alarmstatevalid topics are received and the message body is false. 
    <ol>
        <li>Create a private OutputPort variable for the LED to represent the invalid code indicator on D2</li>
        <li>Create a private Timer variable to do the 1 second on/off logic of the invalid code LED</li>
        <li>Create the callback method the timer uses to toggle the invalid code LED on/off</li>
        <li>Add a subscription for the codevalid topic in the Subscribe method
            <ul>
                <li>Note: you only want to subscribe to codevalid topics for this location code because it doesn't make sense to toggle the LED on a panel that is not being used</li>
            </ul>
        </li>
        <li>Add a subscription for the alarmstatevalid topic in the Subscribe method
            <ul>
                <li>Note: you only want to subscribe to alarmstatevalid topics for this location code because it doesn't make sense to toggle the LED on a panel that is not being used</li>
            </ul>
        </li>
        <li>Add code in the PublishArrived method to test for the specific codevalid or alarmstatevalid topic and enable or disable the timer based on the message (true = disable, false = enable)</li>
        <li>Wire up the Invalid Code LED to the Netduino</li>
        <li>Compile and Run the application</li>
        <li>You wont really be able to test this until you get the keyboard code put together, unless you send specific topics/messages to the broker to simulate a invalid code condition.</li>
    </ol>
</p>
<h3>Coding the Away and Sleep mode switches</h3>
<p>
    There are several ways to read a pin on a Netduino:
    <ul>
        <li>Use the InputPort class and read the pin in a loop</li>
        <li>Use the InterruptPort class and get an event when the pin changes state</li>
        <li>Use the AutoRepeatInputPort class from the open source <a href="http://netmftoolbox.codeplex.com/" target="_blank">.NET Micro Framework Toolbox</a> project on codeplex</li>
    </ul>
    I have to say that the AutoRepeatInputPort is becomming my favorite and it is easy to use, so I suggest you use it.  Since this is the first time you probably have used it I will give a 
    little more detail on how it is coded.  I have already downloaded the Toolbox libraries and they are referenced in the project so you wont have to do that.
    <ol>
        <li>Create a private AutoRepeatInputPort variable for the Away and Sleep input pins (D8 and D9).</li>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">private</span> AutoRepeatInputPort _sleepMode = <span class="kwrd">new</span> AutoRepeatInputPort(Pins.GPIO_PIN_D8, Port.ResistorMode.PullUp, <span class="kwrd">false</span>);
<span class="kwrd">private</span> AutoRepeatInputPort _awayMode = <span class="kwrd">new</span> AutoRepeatInputPort(Pins.GPIO_PIN_D9, Port.ResistorMode.PullUp, <span class="kwrd">false</span>);
</pre>
        <li>In the constructor of the AlarmPanelController class register the callback that will be called when the state of the pin changes</li>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="rem">// Setup the interrupt handlers that detect when the sleep button is pressed</span>
_sleepMode.StateChanged += <span class="kwrd">new</span> AutoRepeatEventHandler(_sleepMode_StateChanged);

<span class="rem">// Setup the interrupt handlers that detect when the alarm button is pressed</span>
_awayMode.StateChanged += <span class="kwrd">new</span> AutoRepeatEventHandler(_awayMode_StateChanged);

</pre>

        <li>Code the callback methods that you just registered above</li>
<!-- code formatted by http://manoli.net/csharpformat/ -->
<pre class="csharpcode">
<span class="kwrd">void</span> _awayMode_StateChanged(<span class="kwrd">object</span> sender, AutoRepeatEventArgs e)
{
    <span class="kwrd">switch</span> (e.State)
    {
        <span class="kwrd">case</span> AutoRepeatInputPort.AutoRepeatState.Press:
            <span class="rem">// The away security mode button was pressed</span>
            _logger.Debug(<span class="str">"Away button pressed"</span>);
            _mqttService.Publish(<span class="kwrd">new</span> MqttParcel(Topic + <span class="str">"alarmstate"</span>, <span class="str">"away"</span>, QoS.BestEfforts, <span class="kwrd">false</span>));
            <span class="kwrd">break</span>;
    }
}

<span class="kwrd">void</span> _sleepMode_StateChanged(<span class="kwrd">object</span> sender, AutoRepeatEventArgs e)
{
    <span class="kwrd">switch</span> (e.State)
    {
        <span class="kwrd">case</span> AutoRepeatInputPort.AutoRepeatState.Press:
            <span class="rem">// The sleep security mode button was pressed</span>
            _logger.Debug(<span class="str">"Sleep button pressed"</span>);
            _mqttService.Publish(<span class="kwrd">new</span> MqttParcel(Topic + <span class="str">"alarmstate"</span>, <span class="str">"sleep"</span>, QoS.BestEfforts, <span class="kwrd">false</span>));
            <span class="kwrd">break</span>;
    }
}
</pre>
        <li>Wire up the Away and Sleep switches as outlined in the schematic/breadboard</li>
        <li>Compile and Run the application</li>
        <li>If the security system is not already armed and all doors, windows and motion detectors are not triggered then you should be able to press the Sleep or Away button and the 
            security system will become armed.</li>
        <li>To disarm the security system go to the Dashboard and enter in 01 for the Secret Code and press the Enter button</li>
    </ol>
</p>
<h3>Coding the Window and Motion detector switches</h3>
<p>
    Since you already know how to use the AutoRepeatInputPort there wont be a lot of steps to this.
    <ol>
        <li>Create a private AutoRepeatInputPort variable for each Window and Motion circuit (D3 and D7).</li>
        <li>Change the constructor of the AlarmPanelController class to register for the events</li>
        <li>Code the callbacks for the events and add the code to send out the correct MQTT message when the Window or Motion sensors change state</li>
        <li>Wire up the Window and Motion switches as outlined in the schematic/breadboard</li>
        <li>Compile and Run the application</li>
        <li>Verify that when you depress the switches that the correct indicator changes state on the dashboard</li>
    </ol>
</p>
<h3>Coding the keyboard switches</h3>
<p>
    Since the keyboard is really just 3 keys (0, 1 and Enter) you will use the same AutoRepeatInputPort class to detect what the user typed in.  The
    user can type any combination of 0 or 1 keys before they press the Enter key so you will have to keep track of the keys and the sequence 
    in which they were depressed.  The job of this device is to just collect the keystrokes and send it off to the broker when the user presses the enter
    key.  This device does not validate the secrete code at all, thats the job of the master control panel running somewhere else.
    <ol>
        <li>Create a private AutoRepeatInputPort variable for each key(D4, D5 and D6).</li>
        <li>Change the constructor of the AlarmPanelController class to register for the events from each key</li>
        <li>Code the callbacks for the events and add the code to send out the correct MQTT message when the user presses the Enter key</li>
        <li>Wire up the 0, 1 and Enter key switches as outlined in the schematic/breadboard</li>
        <li>Compile and Run the application</li>
        <li>Using the dashboard place the alarm in away or sleep mode and use the keyboard to enter in a secrete code of 01 and press enter.  The alarm 
            should disarm</li>
        <li>Also try an invalid code and the Invalid Code LED should blink twice after you press enter</li>
    </ol>
</p>
<h2>Schematic</h2>
<img src="~/Images/AlarmPanel_schem_small.png" width="800px"/>
<h2>Breadboard</h2>
<img src="~/Images/AlarmPanel_bb_small.png" width="800px"/>

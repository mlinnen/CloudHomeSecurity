@{
    ViewBag.Title = "Docs";
}

<h2>What do I need</h2>
<p>Before you attend this event you need to get a few things in order.  We don't have a lot of time during the event to spend it setting up 
    your development environment so make sure you check out <a href="GettingReadyForTheMeeting">Getting Ready For the Meeting</a>. 
</p>
<h2>What will I be doing</h2>
<p>
    You will be building one of the following devices in the home security system:
</p>
<ul>
    <li><a href="/Docs/ExternalDoorEntry">External Door Entry</a>- This device handles all the I/O for any External Door</li>
    <li><a href="/Docs/DoorBell">Door Bell</a>- This device handles the I/O for letting the user know a door bell was pushed</li>
    <li><a href="/Docs/Alarm">Alarm</a>- This device handles the I/O for letting the user know the alarm was tripped</li>
    <li><a href="/Docs/AlarmControlPanel">Alarm Control Panel</a>- This device handles the I/O for the control panels placed in each room of the house</li>
    <li><a href="/Docs/MasterControlPanel">Master Control Panel</a>- This isn't really a device (but it could be) and it is already built
        for you. I am calling it out here because without it the entire system would be a bunch of devices that are independent of one another 
        with no real central control managing the whole security system logic.</li>
</ul>
<p>Determine which one of the devices that you want to attempt to build.  Some of the devices are harder to complete than others.  If you want to start out easy then you can
    do the doorbell device.  If you want a tougher challenge then go ahead and try the Alarm Control Panel.
</p>
<p>
    There will be some code that is already written for you so that you don't have to worry about the communication protocols 
    needed to publish and subscribe to the <a href="http://mqtt.org/">MQTT</a> message bus. Since the protocol is abstracted away from you
     all you need to know is that the MQTT messages are basically made up of two parts: a Topic and a Message. There is a lot more to the MQTT standard that
    you can read up on your own but you won't need it for this project.  Basically, topics are a series of words separated by a / topic separator.  
    The message is simply any string.  The devices on the bus are expected to understand the topics and message formats, but like all
    pub/sub designs the devices don't know about each other.  So the topics and messages are the contracts between the devices.<br />
    
    <ul>Some example topics would be:
        <ol>/house1/externaldoor/front/lock</ol>
        <ol>/house1/externaldoor/front/doorbell</ol>
    </ul>
</p>
<p>MQTT does not specify that topics need to be a specific number of levels deep nor place any rules around topic definition. However 
    for the purpose of this project we will be placing some rules around how topics are constructed.  Each topic will be 4 levels 
    deep and each level will have a special meaning.
    <ul>Topic levels with their generic meaning are as follows:
        <ol>/housecode/devicecode/locationcode/command</ol>
    </ul>
    <ul>Each level of the topic can be further defined as: 
        <ol>housecode - is always "house1"</ol>
        <ol>devicecode - is one of the following: "externaldoor" or "alarmpanel" or "doorbell" or "alarm"</ol>
        <ol>locationcode - is one of the following: "masterbedroom" or "bedroom1" or "bedroom2" or "firstfloor"</ol>
        <ol>command - is device specific so look at the detailed documentation on what commands are available for each device.</ol>
    </ul>
</p>
<p>
    The detailed documentation for each device will outline the topics and messages it publishes as well as the 
    topics and the messages it should subscribe to.  
</p>
<h2>What is running in the cloud</h2>
<p>
    There are two main components that already exist in Azure that the devices will interact with: MQTT Message Broker and Master Control Panel.  
    The message broker runs under an Azure Worker Role.  The Master Control Panel runs in Windows Azure Web Role.  The broker simply routes MQTT messages and has no 
    real home security specific business logic on it.  The Master Control Panel manages the state of the security system as well as the business rules around how the
    security system functions as a whole.  SignalR is used to update the client browsers when the state of the security system changes. Take a look at 
    the <a href="MasterControlPanel">Master Control Panel</a> for more details on how it functions.
</p>
<h2>What does it look like</h2>
<p>The following diagram shows the communications between the devices in the home to the Azure message broker and eventually to a browser.  
    What is important to notice here is that the devices in the home talk to one another through the message broker.   </p>
<img src="~/Images/Architecture.png" />
<p>The following picture zooms in on the 4 different types of devices that are part of this security system.  It's a little easier to see the LED's and Switches that are connected up to each Netduino. </p>
<img src="~/Images/Devices.png" />